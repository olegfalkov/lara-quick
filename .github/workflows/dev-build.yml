# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to  complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  push:
    branches: [ develop ]

name: CI/CD Dev Build

jobs:
  build:
    name: Build and publish docker image
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Get Version
      id: version
      env:
        RUN_NUMBER: ${{ github.run_number }}
      run: |
            DT=$(date +%Y.%m.%d).$RUN_NUMBER-Pre
            echo "::set-output name=value::$DT"
            echo "$DT"            


    - name: Set version
      uses: shitiomatic/str-replace@master
      with:
        find: "##version##"
        replace: "${{ steps.version.outputs.value }}"
        include: "index.html|app.blade.php"
      
    - name: Copy .env
      working-directory: src
      run: php -r "file_exists('.env') || copy('.env.dev', '.env');"
      # "
      
    - name: Install Dependencies
      working-directory: src
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      
    - name: Generate key
      working-directory: src
      run: php artisan key:generate
      
    - name: Directory Permissions
      working-directory: src
      run: chmod -R 777 storage bootstrap/cache      

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: lara-quick
        IMAGE_TAG: ${{ step.version.outputs.value }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Set task definition name in Template
      uses: shitiomatic/str-replace@master
      with:
        find: "#{TaskDefinitionFamily}"
        replace: "lara-quick_${{ step.version.outputs.value }}"
        include: "task-definition-template.json"

    - name: Set task definition name in Template
      uses: shitiomatic/str-replace@master
      with:
        find: "#{TaskDefinitionFamily}"
        replace: "lara-quick_${{ step.version.outputs.value }}"
        include: "app-spec-template.yaml"

    - name: Set task definition name in Template
      uses: shitiomatic/str-replace@master
      with:
        find: "#{ImageName}"
        replace: "${{ steps.build-image.outputs.image }}"
        include: "task-definition-template.json"


    - name: Show changed task definition template
      run: cat task-definition-template.json 

    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '2.1.802' # SDK Version to use; x will use the latest version of the 3.1 channel

    - name: Install Octopus CLI
      run: |
        sudo apt update && sudo apt install --no-install-recommends gnupg curl ca-certificates apt-transport-https && \
        curl -sSfL https://apt.octopus.com/public.key | sudo apt-key add - && \
        sudo sh -c "echo deb https://apt.octopus.com/ stable main > /etc/apt/sources.list.d/octopus.com.list" && \
        sudo apt update && sudo apt install octopuscli
        
    - name: Package Source Code
      run: |
        mkdir -p ./packages/lara-quick/
        cp ./task-definition-template.json ./packages/lara-quick/
        cp ./app-spec-template.yaml ./packages/lara-quick/
        octo pack --id="lara-quick" --format="Zip" --version="${{ step.version.outputs.value }}" --basePath="./packages/lara-quick" --outFolder="./packages"

    - name: Push package to Octopus
      run: octo push --package="./packages/lara-quick.${{ step.version.outputs.value }}.zip" --server="https://compellotech.octopus.app/" --apiKey="${{ secrets.OCTOPUS_API_KEY }}"
     # "

    - name: Create Octopus Release
      run:  octo create-release --project lara-qick --version ${{ step.version.outputs.value }} --packageVersion ${{ step.version.outputs.value }} --server https://compellotech.octopus.app/ --apiKey ${{ secrets.OCTOPUS_API_KEY }}

